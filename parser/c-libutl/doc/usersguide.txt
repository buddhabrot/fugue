.T clibutl Programmer's guide
.A Remo Dentato (rdentato@gmail.com)

.v
                     _       _               _    _
                    / \     / \             / \  / \
                   /  /    /  /          __/  (_/  /
                  /  /_   /  (_   _   _ (_   ___) /
                 /  // \ /  __ \ / \ / \ /  / /  /
                /  //  //  /_/ //  //  //  / /  /
               (__/(__/(______/(____,_/(___)(__/ 
..

.% Introduction
===============

  Dating back to 1972, C is one of the oldest programming languages still
in wide use. I think there are three main reasons for its longevity:

  .# it's a system language that provides a tiny abstraction over the
     underlying platform which makes it perfect choice for writing code
     that directly interacts with hardware components (e.g. device drivers,
     embedded software).
  
   # it can be compiled to fast, compact assembler code. Critical components
     that require the maximum speed can be coded directly in C (e.g. a
     physics engine for a game);
     
   # it's available on a variety of platforms and can be integrated with other
     languages, giving the opportunity of writing portable, interoperable code
     '(yes, that's easier said then done, but, at least, the opportunity is
     there :) );
  ..
       
  Unfortunately, its simplicity is also the cause of its main drawbacks. 
Being a low-level language means that the programmer is responsible for many
tedious tasks like manual memory management and implementation of more complex
data structures.   

  The objectives of '|libutl| is to ease some of those tasks and speed up
the development cycle.  It is meant to be used in diverse scenarios and tries
to provide solutions that are "good enough" in the majority of cases.  This
means that it's up to the programmer to profile the application and provide
alternatives.

  Instead of trying to provide a '/definitive/ answer to C programmers, the
library tries to offer easy to use tools that are appropriate in the vast
majority of cases so that the programmer is free to concentrate on those part
of the application that are really critical.

  
.% Using the library
====================

.%% Overview
^^^^^^^^^^^^

  There are several ways to use '|libutl| in your project.
  
  .# Link the static library '|libutl.a| '(or '|libutl.lib| or whatever
     the extension is in your system) and include the header '|libutl.h|.
     
   # Use the object files and headers you need by linking/including them
     directly.

   # Use '|pmx| alone. The pattern matching functions have no dependencies
     on the other functions, you can simply include '|pmx.h| and link
     '|pmx.o| to your project.    
  ..

  That said, the simplest way to use '|libutl| is just to build the
distribution files '(see next section) and copy the static library '|libutl.a|
and the header file '|libutl.h| where your compiler/linker can find them.


.%% Building the library
^^^^^^^^^^^^^^^^^^^^^^^

  The library has only been tested on 32 bit platforms with different
combinations of compiler and operating systems.  It is knonw to work with:

.t
     Compiler                      Platform
    ---------------------------   ------------------------
    gcc 4.4.1                      Linux Ubuntu 9.10
    gcc 3.4.3                      OpenSolaris 5.11 (x86)
    gcc 3.4.2 (mingw)              Windows 7 / Vista
    gcc 4.3.4 (cygwin)             Windows 7 / Vista 
    MS Visual C/C++ Express 2008   Windows 7 / Vista
    Open Watcom 1.8                Windows 7 / Vista
    Digital Mars 8.51              Windows 7 / Vista
    Pelles C 6.00.6                Windows 7 / Vista
..

  The following compilers do not provide enough C99 support to make the 
library work.

.t
     Compiler                      Platform
    ---------------------------   -------------------
    lcc-Win32                      Windows
    Borland C/C++ 5.5 (free)       Windows
..


.%%% Using the makefile
'''''''''''''''''''''''

  The makefile has been tested with Linux, Win32 Mingw+Msys and Cygwin with
the GCC toolchain.  
  
  The '<config.mk> file contains two configuration parameters:

.['|NO_ASM|]  The library contains small portions of Assembler code for i386.
              To use plain C equivalent, just uncomment the row.
              
 ['|SYS|]     It can be '|MINGW| or '|LINUX|.  It is usually autoconfigured
              by make but it can also be configured manually.
..

  From the root directory type: '|make dist| to build the library and 
the pmx tools.

  The '|dist| directory will contain all that you need to use libutl in
your project.

   
.%%% Using the build scripts
''''''''''''''''''''''''''''

  The '|build| directory contains scripts to build the library using other
compilers.

  The '|win_build.bat| script will try to guess the compiler that is available
and will use it to compile the library and the basic tools.

.v
    D:\projects\clibutl>cd build
    D:\projects\clibutl\build> win_build
.. 

  .> NOTE:
     I'm not an expert in all the compilers supported by the building
     script, please suggest different options if you feel those I used
     are note the best ones. 
  .. 


.% General Utilities
====================

  This section deals with a set of utility functions that are  used during
the development process.

.%% Debugging
^^^^^^^^^^^^^

  During debugging, it's a common technique to insert in the code some tracing
printf() to better understand what's going on in a program.  In conjunction
with a symbolic debugger the generated trace may significantly reduce the
time needed to discover and fix a bug.

  Those printf() statements are usually guarded with the precompiler
symbol DEBUG :

.c C
        #ifdef DEBUG
        printf(“current: %d\n”,k);
        #endif
..

so that they can be disabled when not in debugging mode and can be completely
eliminated from the final version.

  This approach has two main downsides: all those #ifdef clutter the source
code making it harder to read and it is not possible to selectively disable
just some of the messages.

  C-libutl privides a printf-like function (dbgmsg()) that will disappear from
the source code if the symbol DEBUG is not defined. A second function with the
same prototype (_dbgmsg()) is provided that does nothing, it can be used to
turn off a single message.

  Here is the prototype for each function:
  
.c C
        int dbgmsg(const char *fmt, ...);
        int _dbgmsg(const char *fmt, ...);
..

They are to be used as normal printf:

.c C
        dbgmsg(“current: %d\n”,k);
..

Debug messages and unit tests output normally go on '{stderr}.

  This could be not suitable for applications that are not attached to 
a console (e.g. background servers, GUI applications).

  You can use '{=dbgmsg()} as if it was a '|printf()| with the only
difference that the output will be directed to '{utlStderr}.

  Note that to ensure that dbg messages are correctly interleaved with other
messages that might have been printed on the screen, '|stdout| is
flushed before printing and '{utlStderr} is flushed right after.

  To disable just one call to '{dbgmsg()}, you can place an underscore
before its name as '{=_dbgmsg()} is a macro that always expand to nothing.

  If you are worried about the fact that identifiers beginning with an
underscore may be reserved (as per ISO Stanadard 7.1.3) you can use
the '|Xdbgmsg()| macro.  So far I've not find any
reason to do it and using an underscore seems more natural to me. 


.%% Unit testing
^^^^^^^^^^^^^^^^

.%% Error handling
^^^^^^^^^^^^^^^^^^

.%% Logging
^^^^^^^^^^^

While the debugging functions are meant to be used during the
development process, logging functions are intended to be used
in production, after a stable  version of the application has
been released.

These functions are modeled after the widely used log4j
framework but only offers logging to local files.


Logging functions are available only if the symbol '{=UTL_LOGGING}
has been defined before including '|utl.h|.


.%%% Logging levels
~~~~~~~~~~~~~~~~~~

  Logging levels are hierarchical and structured as in log4j. The variable 
'{=logLevel} contains the current logging level.  Logging is off by default.

  Use '{=logSetLevel()} to set the desired level of logging.

The table below shows whether a message of a certain level will be
printed (Y) or not (N) given the current level of logging.
.v
                      message level 
                   DBG INF WRN ERR FTL
              DBG   Y   Y   Y   Y   Y
              INF   N   Y   Y   Y   Y
     current  WRN   N   N   Y   Y   Y
     logging  ERR   N   N   N   Y   Y
      level   FTL   N   N   N   N   Y
              ALL   Y   Y   Y   Y   Y
              OFF   N   N   N   N   N
..


.%%% Logging format
~~~~~~~~~~~~~~~~~~

Log files have the following format:
.v
    <date> <time> <level> <message>
..

 For example:
.v
    2009-01-29 13:46:02 ERR An error!
    2009-01-29 13:46:02 FTL An unrecoverable error
..

These variables are used internally to compose and print log messages:

 .['{=log_abbrev}] The string abbreviations for the levels. Note that the 
                   macro '{=log_ABR} is defined only to ensure a correct
                   macro expansion.
 ..



.%%% Setting the log file
~~~~~~~~~~~~~~~~~~~~~~~~

  By default, logging messages will be sent to stderr. The internal
variable '{=log_file} holds the file descriptor of the file the log
messages should be sent to. 
  Don't use it in your program, if you need a pointer to the log file,
you should use the '{=logFile} macro.


   Log files can be opened in "write" or "append" mode as any normal file 
using the '{=logSetLogFile()} function.
For example:
.v  
  logSetLogFile("file1.log","w") // Delete old log file and create a new one
  ...
  logSetLogFile(NULL,NULL); // Close log file, send next messages to stderr
  ... 
  logSetLogFile("file1.log","a") // Append to previous log file
.. 


  To actually write a message on the log file, use the '{=logWrite()}
function as if it was a '|printf()| with the exception that the first
paratmeter is the level of the message.
Example:
.v
   logWrite(logINFO,"Something weird at %d is happening", counter);
..


You can also use one of the following functions that won't require you 
to pass the message level as parameter:
         
If you want to add something to the log file without creating a new entry
in the log file, you can use the '{=logMessage()} function. 


  To ease text alignment in the log, the string '{=logIndent} contains 
the spaces needed to pass the date, time and type field.
For example:
.v
  logError("Too many items at counter %d",numcounter);
  logMessage(" (%d)\n%sOccured %d times",numitems,logIndent,times++);
..
will produce:
.v
    2009-01-29 13:46:02 ERR Too many items at counter 9 (5)
                            Occured 3 times
..


#define logSetLevel(level)     (logLevel = (x))
#define logFile         (log_file? log_file: stderr) 
#define logSetFile(fname,mode) ((log_file? fclose(log_file) : 0),\
                                (log_file = fname? fopen(fname,mode) : NULL))

#define logWrite(lvl,...) \
       (lvl >= logLevel  \
          ? (time(&log_time),\
             strftime(log_timestr,32,"%Y-%m-%d %X",localtime(&log_time)),\
             fprintf(logFile,"\n%s %s ",log_timestr, log_abbrev[lvl]),\
             fprintf(logFile,__VA_ARGS__),\
             fflush(logFile)\
            )\
          : 0)

#define logDebug(...)    logWrite(logDEBUG,__VA_ARGS__)
#define logInfo(...)     logWrite(logINFO,__VA_ARGS__)
#define logWarn(...)     logWrite(logWARN,__VA_ARGS__)
#define logError(...)    logWrite(logERROR,__VA_ARGS__)
#define logFatal(...)    logWrite(logFATAL,__VA_ARGS__)
#define logMessage(...)  (fprintf(logFile,__VA_ARGS__), fflush(logFile))
#define logIndent     "                        "                            

.%% Finite State Machines
^^^^^^^^^^^^^^^^^^^^^^^^^

 Macros to embed Finite state machine into C programs.

.v
     FSM {
       STATE(x) { ...
                  if (c == 0) GOTO(z);
                  GOTO(y);
       }

       STATE(y) { ...
                  BREAK;  // exit from the FSM
       }

       STATE(z) { ...
                  GOSUB(t);
       }

       STATE(t) { ...
                  GOBACK;  // Go back to the caller state
       }
     }
..

  It's a good practice to include a graphic of the FSM in the technical
documentation (e.g including the GraphViz description in comments).


.%% Memory check
^^^^^^^^^^^^^^^^


.%% Using libutl
^^^^^^^^^^^^^^^

.% Pattern Matching
===================


.%% Overview
^^^^^^^^^^^^
  PMX is a library for strings pattern matching. It uses a set of patterns
that is different from the more commonly used regular expressions.

  One difference with RE is that PMX expressions are never ambigous. This
allows a faster matching algorithm at the expense of some expressive power: 
there are regular expressions that can't be matched in pmx but, at the same
time, there are pmx expressions that can't be matched with regular expressions.

  A key difference with Regular Expressions, is that PMX patterns are 
always /greedy/ and match as much of the string as they can. It is important
to remind this when you get unexpected results in your match.

  Since RE are very well known, I'll refer sometimes to them to explain
how pmx pattern match.  

  The syntax of pmx has been intentionally chosen to be different from RE
to avoid any confusion. 

  The tool <'|pmxshell|> (in the examples folder) allows you to test pmx 
patterns and get a better understanding of their behaviour. 


.%% Patterns
===========
  Every character is a pattern that matches itself with the following
exceptions:

   .['|<|] Introduces a pmx complex pattern.
    
    ['|>|] Ends a complex pattern except when placed at the beginning or at
           the end of the pattern.
    
           At the beginning of a pattern indicates that it can be matched
           anywhere in the string.  Without it, a PMX pattern will only be
           matched at the beginning of the string.  This is the opposite of 
           what Regular Expressions do: without the '^^ character a RE will
           be matched anywhere. 
           
           At the end of the pattern indicates that the pattern has to be
           matched exatly at the end of the string. It is similar to what '$' 
           does at the end of a Regular Expressions.
           
    ['|&|] Introduces a "matching option". It is used to:
    
           .- Escape a special character (e.g. ^^|&&|' or ^^|&>|')
            - Denote a predefined recognizer (e.g. ^^|&f|' it's a pattern
              that matches a decimal number like '|3.2|).
            - Set options while matching (e.g. ^^|&i|' for case insensitive
              match or ^^|&e|' to define the escape character). 
           ..
           
           Note that '|&| is only to be used with the characters specified
           below. Other tools built on top of PMX could assign a special
           mening to a given character.
    ..  


.%%% Predefined character classes
'''''''''''''''''''''''''''''''''

  These patterns match characters that are within commonly used sets.

 .['|<a>|]  (isalpha)	matches an alphabetic character
  ['|<c>|]  (iscntrl)	matches a control character
  ['|<d>|]  (isdigit)	matches a digit. Not locale-specific.
  ['|<g>|]  (isgraph)	matches a graphic character, excluding the space character.
  ['|<i>|]  (isascii) matches a character whose code is between 0 and 127
  ['|<k>|]  (isblank)	matches a blank character 
  ['|<l>|]  (islower)	matches a lowercase character
  ['|<p>|]  (ispunct)	matches a punctuation character
  ['|<q>|]  (isalnum)	matches an alphanumeric character
  ['|<r>|]  (isprint)	matches a printable character, including the space character.
  ['|<s>|]  (isspace)	matches a space character
  ['|<u>|]  (isupper)	matches an uppercase character
  ['|<w>|]  (isword)) matches an alphanumeric character or and underscore ^^|_|'
  ['|<x>|]  (isxdigit) matches an hexadecimal digit. Not locale-specific.
  ['|<.>|]  matches any character (except ^^|\0|').
 .. 

  To match characters that do *not* belong to a given set, use the uppercase
letter.  For example ^^|<D>|' matches a character that is not a digit.


.%%% User defined character classes
'''''''''''''''''''''''''''''''''''

  It is possible to match a character that is in in a given set of characters 
as follows:

 .['|<=|...'|>|]  matches a character that belongs to the specified set
  ['|<!|...'|>|]  matches a character that doesn't belong to the specified set
  ['|<#|...'|>|]  matches a character that doesn't belong to the specified set
                  but skip over escaped characters (see the '|&e| matching
                  option below).
 ..
  
 For example:
 
 .['|<=xA-Ga-g>|] matches one of the following characters: '|ABCDEFGabcdefgx|
  ['|<!xyz>|]     matches anything except the characters '|x|, '|y| and '|z|
  ['|&e%<#ab>']   matches "a" "b" "%d" 
 ..

  If any of the characters '|&|, '|>| or '|-| are part of the set to be specified,
they must be preceeded by '|&|.  For example:

 .['|<=A&-B>|] matches '|A|, '|B| or '|-|
  ['|<=A-B>|]  matches '|A| or '|B|
  ['|<=<&>|]   matches '|<| or '|>|
 ..

  The pattern "'|<j...>|" (and its negation "'|<J...>|") is meant to be
used by tools that generate pmx expressions and not for expressions created
"by hand". It assumes that the patterns are sorted so that testing is faster.  

  For example, "'|<jA-Z_a-z>|" will work properly and will be slightly faster
than "'|<=A-Z_a-z>|"  while "'|<jA-Za-z_>|"  will not work! 

  
.%%% Alternative strings
''''''''''''''''''''''''

  To match one of multiple strings use the pattern '|<$...$...$...>|'. For
example:
 
 .v
    <$abc$def>
 ..
matches "'|abc|" or "'|def|"

  If the characters '&', '>' or '$' are part of the strings specified,
they must be preceeded by '&'.  For example:

 .v
    <$a&$b$c&>d>
 ..
 
matches ^^|a$b|' or  ''|c>d|'.
 
   
.%%% Repetitions
^^^^^^^^^^^^^^^
  A pattern may be repeated using ''|?|', ''|*|' and  ''|+|':
  
  .['|?|] Repeat 0 or 1 times, i.e make the pattern optional.
   ['|*|] Repeat 0 or n times
   ['|+|] Repeat 1 or n times
  ..

  Examples:
  
  .['|<+d>|]  matches a sequense of digits
   ['|x<?d>|] matches '|x| optionally followed by a digit.
   ['|<=A-Za-z_><*=A-Za-z0-9_>'] a C identifier
   ['|<+$ab$cd>']  matches "'|ab|" or "'|cd|" or "'|abcd|" 
                   or "'|cdcdabcdab|" etc.
  ..
  
.%%% Submatching captures
^^^^^^^^^^^^^^^^^^^^^^^^
  Submatches can be denoted using parenthesis. There can be up to 9 
submatches. Submatches can be nested. Examples:

  .['|(&f)(<?$in$cm>)|]    matches "'|2.0cm|", "'|-3in|", "'|4.1|" etc.;
                           saves the number as capture 1 and the unit of
                           measure as capture 2.
                        
   ['|=((<?=+&->)<+d>))|]  matches "'|=-5|", "'|=42|", "'|=+1|" etc.;
                           saves the signed number as capture 1 and the
                           sign as capture 2;
  .. 

.%%% Back references
^^^^^^^^^^^^^^^^^^^
  It is possible to refer to captured test with '|<1>|, '|<2>|, ...,  '|<9>|.
  
  For example: '|(<u>)<1>| matches the doubling of an upper case character as
'|XX| or '|AA|.  
  

.%%% Recognizers
^^^^^^^^^^^^^^^
  Recognizers are patterns that match a specific object (for example
"'|&q|" for a quoted string).
  
  .['|&b|'/xy/] Braced string. Matches a string enclosed by the characters
               /x/ and /y/.
               
               If /x/ and /y/ are different there must be a balanced number
               of delimiters to complete the match.  For example the 
               pattern "'|%b()|" matches the entire string
               "'|(defun f (x) (+ x 1))|".
               
               If /x/ and /y/ are equal, the match stops at the first occurence
               of the delimiter character.
               
               The recognires '|&b| honours the escape character set with '|&e|
               (see below)
                
   ['|&d|]     A possibly signed integer (e.g. : "'|32|", "'|-15|", "'|+7|")
   ['|&f|]     A possibly signed decimal number. It will also match integers
               (e.g. : '|3.2|, '|-.5|, '|+7|).
               
   ['|&k|]     A sequence of blanks (space or tab)
   ['|&l|]     The rest of the line up to the newline character(s) (see below)
   ['|&n|]     The end of the line. Matches any of "'|\r\n|", "'|\r|" or "'|\n|"
   ['|&q|]     A single or double quoted string (including the quotes). To
               match just one type of quoted string use the "'|&b|" recognizer
               (e.g. "'|&b'`'|" for single quoted strings).
 
               The recognizer '|&q| honours the escape character set with '|&e|
               (see below).
               
   ['|&s|]     A sequence of spaces (space, tab, newlines, vertical tabs, etc)
   ['|&x|]     An hexadecimal number (e.g. "'|C1A0|")
  ..

  Use the uppercase corresponding letter to make it optional. For example:
  
  .['|a&K+&Kb|]      matches '|a+b|, '|a + b|, '|a+   b|, etc.
   ['|x&D|]          matches '|x|, '|x42|, '|x+1|, etc.
   ['|&f<?=eE>&F|]   matches '|-3.2|, '|+3.1E-52|', etc
  .. 


.%%% Matching options
^^^^^^^^^^^^^^^^^^^^

  .['|&e|'/x/] Set the character '/x/ as the escape character. For example,
              given the string '|"abc%"def"|': 
              
                  .['|&q|]     matches '|"abc%"| 
                   ['|&e!&q|]  matches '|"abc%"def"|
                  ..
               
   ['|&E|]    Clear the escape character.
   ['|&G|]    Set the /goal/ of the match. This cand be used as a form
              of lookahead. For example "'|xy&G<D>|" will match the string
              "'|xy|" only if the next character is not a digit.
   ['|&i|]    Start case insensitive match.
   ['|&I|]    Stop case insensitive match.
  ..


.%%% Alternative expressions
^^^^^^^^^^^^^^^^^^^^^^^^^^^
  Two pmx expressions can be joined with "'|&`||" to indicate that if the 
first expression fails, the second must be tried.

  In other words, if '|A| and '|B| are two generic pmx expressions, the 
expression '|A&`|B| matches if '|A| matches or if '|A| fails and '|B| matches. 

  Note that using '|&`|| in conjunction with '|>| may have unexpected results.

  To signal the only possible match in a sequence of alternative expressions
you can use the '|&!| option. This is useful to avoid trying to match next
expressions if you already partially matched one.

  Consider, for example, what happens when trying to match the string '|axx| 
against the pattern '|abc&'|def|: the pmx engine will first try to match '|abc|
and then, having failed that when the first '|x| is encountered, it will
try '|def|.

  It does not take advantage of the fact that having matched the '|a| in '|axx|,
it could never possibly match '|def|! 

  The pattern '|a&!bc&'|def|', instead, says that once you start matching
the first pattern, you will never possibly match any other alternative and,
hence, the entire match should fail.     
   
  The operator "'|&:|'/x/" is meant to be used, in conjunction with '|&`||,
by tools that generate pmx expressions. It's use in hand-made expressions
created is higlhly discouraged.

  The value /x/ is the length of the expression, this makes faster skipping
over alternative expressions that fail.


.%% pmx API '<pmxapi>
""""""""""

   pmx functions use objects of type '{pmx_t} to keep track of 
what's has been matched. From and API perspective, it has to be treated
as an '/opaque/ pointer; inner details can be found in the
'<pmx.c=pmx.c#matchinfo> file.

.%%% Matching on a string
^^^^^^^^^^^^^^^^^^^^^^^^

  The simplest way to match a string against a pattern is to use the
'{=pmxMatchStr()} function.
  Upon a successuful match, it returns a pointer of type '|pmx_t| that
can be used to retrieve information on the match. 
  If no the string desn't match, '|NULL| is returned.


.%%% Got a match '<gettxt>
^^^^^^^^^^^^^^^
  Upon a successful match, the following functions will retrieve details
of the match. Their first argument is of type '{pmxMatch_t} and is 
typically the value returned by a '{pmxMatchStr()} function call.
 
  .['{=pmxMatched(mtc)}] 
                       Which sub pattern matched. Assuming a pattern is
                       made of a sequence of "'|...&`|...&`|...|", this
                       function will return which of the alternatives 
                       matched. The alternatives are numbered starting
                       with 1. It returns 0 if none matched.
                       
   ['{=pmxLen(mtc,n)}]
                       The length of the capture '{n}. The entire match is
                       considered the capture 0.
                         
   ['{=pmxStart(mtc,n)}]
                       The start of the capture '{n}. The entire match is
                       considered the capture 0.
                       This is an integer offset from the start of the string
                       that was passed to '{pmxMatchStr()}'. 
                         
   ['{=pmxEnd(mtc,n)}]
                       The end of the capture '{n}. The entire match is
                       considered the capture 0.
                       This is an integer offset from the start of the string
                       that was passed to '{pmxMatchStr()}'. 

   ['{=pmxToken(mtc)}]
                       Returns the token associated with the alternative
                       that matched.
                       It can also return two special values:
                       .['{=pmxTokNONE}]  No token associated or no match (0x00).
                        ['{=pmxTokEOF}]   The string to match was empty (0x7F).
                       ..
                       Tokens can be associated to each alternative. 
                       The pattern "'|&|'/x/" where '/x/ is an ASCII
                       character greater or equal to 0x80 set the token
                       value to '/x/.                         
  ..  

.%%% Token scanners '<tokscanner>
^^^^^^^^^^^^^^^^^^^^



.%%% pmx switch
^^^^^^^^^^^^^^^^^

  The macro '{=pmxSwitch()} implements an '/extension/ of the C '|switch|
  control structure.

.v
   #define T_LETTERS  xF1     <--- tokens are in the form '|x|'/HH/
   #define T_NUMBERS  xF2          where HH is an hex number >= 80
   #define T_OTHER    xFE
   
   pmxSwitch (s,     <- this '*must* be a '|char *| variable
     pmxTokSet("<+=0-9>",T_NUMBERS)            <--- Note: '*NO* semicolon   
     pmsTokSet("<+=A-Z>",T_LETTERS)               at the end of lines     
     pmsTokSet("<+=a-z>",T_LETTERS)            <---                       
     pmsTokSet("<.>",T_OTHER)     
   ) {
     pmxTokCase(TK_LETTERS):
       printf("LETTERS: %.*s\n",pmxTokLen(0),pmxTokStart(0));
       break;

     pmxTokCase(TK_NUMBERS):
       printf("NUMBERS: %.*s\n",pmxTokLen(0),pmxTokStart(0));
       break;
   }   
..

  This behaves like a switch (with '{=pmxTokCase} used instead of
'|case|).

  The '|s| argument must be a char * variable that points to to thext
to be scanned. Upon successful match, it will be advanced to the end of
the match.

  There are two special tokens that are always defined:
  
  .['|pmxTokEOF|]    returned at the end of the text to parse;
   ['|pkxTokNONE|]   returned if none of the defined patterns matches
  ..

.%%% Callback Scanners
^^^^^^^^^^^^^^^^^^^^^

  The function '{=pmxScanStr()} can be used to repeatedly match a pattern
against a text and call a function each time a match is found.
  
  The pattern is usually made of a list of expression joined with the '|&`||' 
operator.
  
  On a successful match, the callback function is called passing the matching
results as parameters.  

  If the callback function returns zero, the pattern is matched again
starting from the first character after the end of the previous match, 
otherwise  the scanner stops and '{pmxScanStr()} returns that value. 

  Look at the '<pmxshell.pmx#> for an example of how to use this function. 

  Callback functions must be of type '{=pmxScanFun_t types}. 

  Within a call back, you can pass the '|txt| and '|mtc| arguments to the
functions to get the <matched text=gettxt>.

.%%% Loop scanners
''''''''''''''''''

  To ease the definition of more complex scanners, the following
alternative is provided. The syntax makes use of conventions that 
need to be abided to make everything work.

  Basically, one define a set of tokens, associate one or more 
pmx patterns to them and then specify the actions to perform when a
token is encountered in the text. 
  
.v
   #define T_LETTERS  xF1      // <--- tokens are in the form '|x|'/HH/
   #define T_NUMBERS  xF2      //   where HH is an hex number >= 128
   #define T_OTHER    xFE
   
   pmxScannerBegin("Text to be scanned ....")  // <--- Note: '*NO* semicolon
                                               //    at the end of lines
     pmxTokSet("<+=0-9>",T_NUMBERS)            //  <---
     pmsTokSet("<+=A-Z>",T_LETTERS)
     pmsTokSet("<+=a-z>",T_LETTERS)
     pmsTokSet("<.>",T_OTHER)
     
   pmxScannerSwitch    // <--- This sections is similar to a
                       //      regular switch() statement
     pmxTokCase(TK_LETTERS):
       printf("LETTERS: %.*s\n",pmxTokLen(0),pmxTokStart(0));
       continue;

     pmxTokCase(TK_NUMBERS):
       printf("NUMBERS: %.*s\n",pmxTokLen(0),pmxTokStart(0));
       continue;
       
     default: continue; 
      
   pmxScannerEnd;      // <--- Note: the semicolon at the end!!
   
..

  Scanning will stop as soon as the end of text is reached, no match
is found or a break is executed within the '|pmxTokSwitch| section. 

  There might be the need of grouping the tokens so that only some are checked
in a given state. The following example transforms a text to all lower case 
except if the text is in single quotes:

.v
   #define T_LOWER    x81
   #define T_IGNORE   x82
   #define T_ENABLE   x83
   #define T_DISABLE  x84
   #define G_OUTQUOTES  0
   #define G_INQUOTES   1
   
   pmxScannerBegin("mIxEd 'CASE' tExT")
     pmxTokGroupBegin
       pmxTokSet("'",T_DISABLE)
       pmsTokSet("<.>",T_LOWER)
     pmxTokGroup(G_INQUOTES)
       pmxTokSet("'",T_ENABLE)
       pmsTokSet("<.>",T_IGNORE)     
     pmxTokGroupEnd
     
   pmxScannerSwitch
     pmxTokCase(T_LOWER):   putchar(tolower(*pmxTokStart(0)));
                            continue;

     pmxTokCase(T_IGNORE):  putchar(pmxTokStart(0));
                            continue;
       
     pmxTokCase(T_ENABLE):  pmxTokGroupSet(G_OUTQUOTES);
                            continue;
       
     pmxTokCase(T_DISABLE): pmxTokGroupSet(G_INQUOTES);
                            continue;
      
   pmxScannerEnd;      
   
..

will print: '|mixed CASE text|

.%% Tools
""""""""
  The '|examples| directory contains two useful tools for pmx.
  
  .[pmxshell]   an interactive shell that allows to define a set of 
                pmx patterns and test strings against them.  It is 
                intended to be used to ensure that a set of patterns
                behaves as it is supposed to.
               
   [pmx2c]      a preproprocessor that modifies the way the switch
                statment works allowing cases that are pmx patterns
                rather than constants. 
  ..
  
  You should read about them to better understand how to use pmx.
  


.%% Summmary
===========

.[]
  ['|<:n:|'/.../'|>|]          matches exactly n times
  ['|<:n,m:|'/.../'|>|]        matches n up to m times
  ['|<:,m:|'/.../'|>|]         matches 0 up to m times
  ['|<:n,:|'/.../'|>|]         matches n or more times
  ['|<?|'/.../'|>|]            matches 0 or 1 times
  ['|<+|'/.../'|>|]            matches 1 or more times
  ['|<*|'/.../'|>|]            matches 0 or more times
  ['|<=|'/.../'|>|]            matches characters in set
  ['|<!|'/.../'|>|]            matches characters not in set
  ['|<$|'/.../'|$|'/.../'|>|]  matches one of the strings
  ['|<a>|]  (isalpha)	 matches an alphabetic character
  ['|<c>|]  (iscntrl)	 matches a control character
  ['|<d>|]  (isdigit)	 matches a digit. Not locale-specific.
  ['|<g>|]  (isgraph)	 matches a graphic character, excluding the space character.
  ['|<i>|]  (isascii)  matches a character whose code is between 0 and 127
  ['|<k>|]  (isblank)	 matches a blank character 
  ['|<l>|]  (islower)	 matches a lowercase character
  ['|<p>|]  (ispunct)	 matches a punctuation character
  ['|<q>|]  (isalnum)	 matches an alphanumeric character
  ['|<r>|]  (isprint)	 matches a printable character, including the space character.
  ['|<s>|]  (isspace)	 matches a space character
  ['|<u>|]  (isupper)	 matches an uppercase character
  ['|<w>|]  (isword))  matches an alphanumeric character or and underscore ''|_|'
  ['|<x>|]  (isxdigit) matches an hexadecimal digit. Not locale-specific.
  ['|<.>|]  matches any character (except ''|\0|').
  ['|<1>|]  matches capture 1
  ['|<2>|]  matches capture 2
  ['|<3>|]  matches capture 3
  ['|<4>|]  matches capture 4
  ['|<5>|]  matches capture 5
  ['|<6>|]  matches capture 6
  ['|<7>|]  matches capture 7
  ['|<8>|]  matches capture 8
  ['|<9>|]  matches capture 9
  ['|>|]    at the start of the pattern matches everywhere in the text
            at the end of the pattern, matches the end of the text
..

.[]
   ['|&:|]      expressione length
   ['|&`||]     Alternate expression
   ['|&!|]      fail all
   ['|&E|]      Clear the escape character.
   ['|&G|]      Set the /goal/ of the match.
   ['|&I|]      Stop case insensitive match.
   ['|&b|'/xy/] Braced string.                
   ['|&d|]      A possibly signed integer
   ['|&e|'/x/]  Set the the escape character.
   ['|&f|]      A possibly signed decimal number.               
   ['|&i|]      Start case insensitive match.
   ['|&k|]      A sequence of blanks (space or tab)
   ['|&l|]      The rest of the line up to the newline character(s)
   ['|&n|]      The end of the line.
   ['|&q|]      A single or double quoted string (including the quotes).
   ['|&r|]      Matches the beginning of a line 
   ['|&s|]      A sequence of spaces (space, tab, newlines, vertical tabs, etc)
   ['|&w|]      An hexadecimal number.
   ['|&x|]      An hexadecimal number.
   ['|&|'/z/]  If z > 0x7F sets the '/token/.
..

.% Strings
==========

.% Containers
=============

.%% Tables
^^^^^^^^^^

.%% Vectors
^^^^^^^^^^^

.%% Stacks
^^^^^^^^^^

.%% Records
^^^^^^^^^^^

.% Examples
===========


  I'm firmly convinced that concrete examples are much better than over-detailed
documentation that's why I provided a set of them in the '|examples| directory.

  .['|pmx2c|]      This is actually a tool that comes with the libraries.
                   It takes a C source file with embedded pmx switches and 
                   produces a plain C file ready for compilation.
                   Uses a '/bootstrap/ technique to build itself.
                     
   ['|pmxshell|]   The patterns used by pmx may be not very intuitive. This
                   tool allows you to define a set of patterns and try to
                   match a string against them.
                   A useful function to understand how a pattern works is
                   "explain" that gives a textual description of a pattern.
                   
   ['|uncomment|]  Strips a C source file from comments. It's used in the
                   build process to remove the documentation comments 
                   within the library header '|libutl.h|
                   
   ['|cxrf|]       Simply collects identifiers from a C source file and counts
                   the occurence for each.
                    
   ['|fmt|]        A light markup text formatter to extract documentation
                   from the library source file.
                   
   ['|macro|]      A simple macro system inspired by 
                   '<musicpad:http://l01c.ouvaton.org/musicpad-help.html>
  .. 

.%% pmx2c
^^^^^^^^^

.%% pmxshell
^^^^^^^^^^^^

.%% uncomment
^^^^^^^^^^^^^

.%% fmt
^^^^^^^

.%% fsm
^^^^^^^
 
.% License
==========
    
This software is distributed under the terms of the BSD license.

.v
==  BSD LICENCE  ===============================================================

 (C) by Remo Dentato (rdentato@gmail.com)
 All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
      this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright notice,
      this list of conditions and the following disclaimer in the documentation
      and/or other materials provided with the distribution.
    * Neither the name of the original author nor the names of its contributors
      may be used to endorse or promote products derived from this software
      without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


http://creativecommons.org/licenses/BSD/
http://opensource.org/licenses/bsd-license.php

================================================================================
..
