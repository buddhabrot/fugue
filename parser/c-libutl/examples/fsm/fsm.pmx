/* 
**  (C) by Remo Dentato (rdentato@gmail.com)
** 
** This sofwtare is distributed under the terms of the BSD license:
**   http://creativecommons.org/licenses/BSD/
**   http://opensource.org/licenses/bsd-license.php 
*/



#include "libutl.h"
#include <ctype.h>

chs_t ln=NULL;
int ln_num=1;

#define ACTION  2
#define PATTERN 1

#define STATE(x)   _s_##x : if (*cur == '\0') goto _s_end; else
#define GOTO(x)    goto _s_##x

#define ENDSTATE   _s_end :

tbl_t compilefsm(char *buf)
{
  tbl_t fsm = NULL;
  char *cur;
  int state = PATTERN;
  
  chs_t statename = NULL;
  chs_t pattern = NULL;
  chs_t action = NULL;
  
  cur = buf;

  STATE(pattern) {
    switch pmx(cur) {
      case ">&n" : ln_num++; 
      case "><s>" : 
      case ">#<+!\n\r>" :
        break;

      case ">[&S(<+w>)&S]" :
        printf("STATE: [%.*s]\n",pmx(Len,1),pmx(Start,1));
        break;
      
      case ">(&q)&S=" :
        printf("PATTERN: [%.*s]\n",pmx(Len,1)-2,pmx(Start,1)+1);
        GOTO(action);
      
      default:
        fprintf(stderr,"ERR:5541@%d Unexpected character [%c]\n",ln_num,*cur);
        GOTO(error);
    }
    GOTO(pattern);
  }
  
  STATE(action) {
    switch pmx(cur) {
      case ">&n" : ln_num++;
      case "><s>" : 
      case ">#<+!\n\r>" :
        break;
        
      case ">&q" :
        printf("STRING: [%.*s]\n",pmx(Len,0)-2,pmx(Start,0)+1);
        break;
      
      case ">&&<q>" :
        printf("VAR: [%c]\n",tolower(pmx(Start,0)[1]));
        break;
      
      case "><+a>&b()" :
        printf("FUN: [%.*s]\n",pmx(Len,0),pmx(Start,0));
        break;
        
      case ">;" : GOTO(pattern);
       
      default :
        fprintf(stderr,"ERR:5542@%d Unexpected character [%c]\n",ln_num,*cur);
        GOTO(error);
    }
    GOTO(action);
  }
  
  STATE(error) {
    return NULL;
  }
  
  ENDSTATE {
  }
  
  
  return fsm;
}

int main(int argc, char *argv[])
{
  FILE *inf = stdin;
  FILE *outf = stdout;
  FILE *tmpf;
  char *alt;
  char *fname = "(stdin)";
  int switch_num=0, case_num=0, c;
  tbl_t fsm;
  chs_t buf=NULL;
  
  /*
  tmpf = tmpfile();
  if (!tmpf) utlError(202,"Unable to open temp file");
  */
  
  if (argc > 1) { 
    fname = argv[1];
    inf = fopen(fname,"r");
  }
  if (!inf) utlError(203,"Unable to open input file");

  buf = chsRead(buf,inf,'w');
  fclose(inf); inf = NULL;
  
  if (argc > 2)
    outf = fopen(argv[2],"w");
  if (!outf) utlError(204,"Unable to open output file");

  
  fsm = compilefsm(buf);
 
  
  if (outf && outf != stdout) fclose(outf);
  if (inf && inf  != stdin)  fclose(inf);
  
 /*
  fclose(tmpf);
  */
  exit (0);  
}
