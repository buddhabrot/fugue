.Title FMT - Text Formatter
.Author Remo Dentato
.Date 

.% :Abstract
============

  This document describes the markup language that fmt recognize
  in comments.

  
.% Objectives
=============

  One of the main '*fmt* gols is to keep the source code much readable
as possible.  Using a '/real/ typesetting system like TeX or Lout would mean
adding a layer of  complexity  to the  comprehension  of the source  code in
its native (ASCII) form, that's why the markup language offered by *fmt* is
designed to be "ASCII-friendly".

  The aim is to provide a mean of express concepts on the program rather than
losing time to decide how much the paragraphs should be spaced.

  Hopefully the commands are so simple and intuitive that this style could be
easily adopted by people with different background.


.% Other works
==============

  '*fmt* is just another '/lightweight markup languages/ as those listed on
 '<wikipedia:http://en.wikipedia.org/wiki/List_of_lightweight_markup_languages>.
     

.% Text formatting
=================

.%% Structural tags
-------------------

  These are tags that deal with structural properties of the document like
sections, lists, tables and so on.

  A structural tag is a line that begins with a '|.| character (ASCII 46)
possibly with trailing blanks '(Except for closing verbatim text where '|..|
must appear at the very beginning of the line).

  The tag extends up to the end of line so that parameters may be
specified.

  All tags are one character long, the rest is ignored. This means that, for
example, '|.T| and '|.Title| are exactly the same (and so is '|.Tutor|!)
  
  For example in:
  
.verb
  .table <tab_outcm> "Results of performance test"
..

 .* the tag '|.table| says that a table is about to begin;
  
  * '|<tab_outcm>| is a mark that can be used to refer to the table
    afterward
  
  * '|Result of performance test| is the caption to appear below the table
    or in the table index, if present.  
 ..

  
.%% Inline tags
---------------

  The '|quoteright| '|`'| (ASCII 39) introduces '/inline/ tags, i.e.
tags that do not break the line in which they are.

  Examples are font style changes ('|`'*| for bold), footnotes ('|`'(|), etc ...

  
.%% <qleft> Escape sequence 
----------------------------

  The '|quoteleft| '|``| (ASCII 96) is used to escape a character so that
it loses any special meaning it may have.

  This works for any character so that in the source document writing
'|a word| or '|``a`` ``w``o``r``d| produces exactly the same output.

   For example, to typeset "`'*" without having bold style turned on, you can
choose between '|```'*| or '|'``*|.


.%% Paragraphs
--------------

   A paragraph is ended by one or more blank lines, i.e. a line that
contains only blank characters.

   Characters considered blanks are:
   
  .- horizontal tab (ASCII 9)
   - newline (ASCII 10)
   - vertical tab (ASCII 11)
   - new page (ASCII 12)
   - carriage return (ASCI 13)
   - space (ASCII 32)
  ..
   
.%%% Line breaks
''''''''''''''''
   If a line ends with '|_| immediately before the '|\n| then it's a line break
that does not mark the end of paragraph.

.%%% Ignoring lines
''''''''''''''''''   
   If a line starts with '|-| or '|#| its completely ignored and does not mark
the end of paragraph.

.%% Text styles
---------------

   The font used by the final stage of fmt will depend on the actual
formatter, no explicit control is given over the font face used.

   However you can specify four styles:

 .[Italic]     Italic is used to '/emphasize/ one ore more words. You get
               it enclosing the text to render in italics between '|`'/|
               and '|/|;
  
  [Bold]       '*Bold* is switched on with '|`'*| and off with '|*|;

  [Teletype]   Elements like identifier or user-typed material, should
               be rendered in '|teletype| style. Anything between '|`'`||
               and '|`|| will appear in a Courier-like font to simulate
               terminal characters.

  [Underlined] Not much used. You can _underline_ some text enclosing
               it between '|_| and '|_|
 ..
 
   In any case where confusion could arise you should use the |``| charachter
(see the relative <section:qleft>).

  You can nest styles but you cannot activate the same style twice (a warning
will be issued). 

  If you type  '|`'/`'*bold  italic*/| you will get a '/'*bold  italic*/ text.
Note that it is  important  to preserve the order, so  '|`'/`'*bold  italic/*|
won't work!
  
  
.%% Document informations
-------------------------

  These are the informations that are usually included in the title page.
  
 .[Title]  It is usually the first information find in the document but it
           has not to be so. The tag '|.T| marks the line that contains
           the title;

  [Author] The name of the author is intrduced with '|.A|. Multiple authors
           may be separated with a semicolon '|;|;
        
  [Date and time] The date and time to be associated with the document
           '|.D|. If it's missing it will be replaced by the current date.

  [Information fields] Other document informations may be associated using
           the '|.:| tag. Whatever follows on the line is the type of
           information. Commonly used information are:
           
          .[Organization] The organization or company the document has been
                          written for or within.
                      
           [Contact] How to contact the author(s). 
           
           [Address] Addresses. 
           
           [Version] Version (generally an '|RCSId| is placed here).
           
           [Status] Draft, approved, confidential, ... . 
           
           [Copyright or (C)] copyright. 
           
           [Dedication] topic. 
          ..
          
          An information field ends when another one starts or when a new
          section is encountered 
  ..
                      
.%% Sections
------------

  A document is divided in sections and sub sections. Use '|.%|, '|.%%| and
so on to mark the sections, subsection, subsubsections, ...

  It is a good idea not to go more than 3 or 4 level deep as many typesetting
systems do not allow too many levels.

  If the line after a section title starts with '|=|. '|-|. '|~| or '|`'|it will
be ignored. This allows the title to be adorned as in:

.v
   .%% Sections
   ============
..

  Sections can also have a '/class/. This can be used to deal with special 
sections like the "abstract".

.v -end-verb- <abstr>
  .% :abstract
    .....
-end-verb-

   
.%% Lists
---------

  A list is a sequence of items. There are many typese of lists:
  
  .['|#|]               '/numbered/
   ['|-|]               '/dashed/
   ['|o|]               '/bulleted/ with a white circle
   ['|*|]               '/bulleted/ with a black dot
   [`['/some term/`]]   term definition
  ..
  
  Note that the type of dash/bullet might not be honoured by the typesetter. 
  
  Lists end when a double dot '|..| is found at the beginning of a line.

  Lists can be nested:
  
.v
   .- I'm the first item in a dashed list.
       
        Blank lines still mark the end of a paragraph but not the
        end of the item!
       
          .# Now, I'm the first item in a numbered sublist
          
           # Guess who am I?
           
             And I do also own this line!
          ..
          
        This line belongs to the first dashed item!
       
    - I'm the second item of the dashed list
      I'm the second line of the second item
        
      And also this third line belongs to that item. 
   ..
..

  Note that indentation is totally unimportant!
  
  
.%% Equations
-------------

  Equations are difficult to render in ASCII but may be very useful when
explaing the behavior of certain part of code. The tag '|'`$| enters
math mode. 

  The syntax is the one used by OpenOffice '(see
'<http://documentation.openoffice.org/manuals/oooauthors/MathObjects.pdf>).

The reason for such adoption is that it is close to standard
mathematical conventions and is easily readable in ASCII form even if you
don't know exactly its syntax.

  It can be used inline as in '$pi$ (typeset as '|'`$pi$|) or as a display
with the '|.$| tag at the beginning of a line as in:

.$
   int from a to b { x^2 + 1 over x dx }
..  

produced by:

.v
  .$
     int from a to b { x^2 + 1 over x dx }
  ..  
..

  If possible, the formatting phase will translate the equation in
the corresponding format '(for example MathML embedded in HTML) otherwise
it will retain the ASCII format that is readable anyway.


.%% Verbatim text
-----------------

  One of the features common to all text formatters is the ability to disable
any formatting for a piece of text. This is useful for including raw material
that should be passed as it is to successive stages.

.verb
  .verb
    This part will be used if a more specific formatter won't be found.
    It will be rendered in Courier monospace.
  .- html
    This is what will be included in an html page
  .- txt
    If it's a plain txt file, include "file.txt":
  .+ /home/remo/file.txt
  ..
..

  To be correctly recognized, '|..|, '|.-| and '|.+| have to occur at the first
column (i.e not preceded by any blank) otherwise they'll be treated as text.

 If the '|..| string has to appear at the beginning of a line in the verbatim
text, a different end marker can be specified as follows:

.verb
  .verb --end-of-vebatim--
  ..
  .. verbatim text
  ..
  --end-of-vebatim--
..
 

.%% Tables
----------

  A very simple form of table is supported.

The table:

.t '<tabex> "A sample table"

        |*       |       |      *|
        |  hcol1 | hcol2 | hcol3 |
--------+--------+-------+-------+
 hrow1  | cell 1 | cell  | third |
        |        | two   | cell  |
--------+--------+-------+-------+
 hrow2  | second | cell  | third |
        | Row    | two.2 | cell3 |
--------+--------+-------+-------+
..

is produced by the text:

.verbatim
  .t '<tabex> "A sample table"

          |*       |       |      *|
          |  hcol1 | hcol2 | hcol3 |
  --------+--------+-------+-------+
   hrow1  | cell 1 | cell  | third |
          |        | two   | cell  |
  --------+--------+-------+-------+
   hrow2  | second | cell  | third |
          | Row    | two.2 | cell3 |
  --------+--------+-------+-------+
  ..
..

or (equivalently) by:

.verbatim
  .table '<tabex> "A sample table"

          |*       |       |      *|
             hcol1   hcol2   hcol3
  -------- -------- ------- -------
   hrow1    cell 1   cell    third
                     two     cell
  -------- -------- ------- -------
   hrow2    second   cell    third
            Row      two.2   cell3
  -------- -------- ------- -------
  ..
..

  .        <======= ======= ======>
             hcol1   hcol2   hcol3
  -------- -------- ------- -------
   hrow1    cell 1   cell    third
                     two     cell
  -------- -------- ------- -------
   hrow2    second   cell    third
            Row      two.2   cell3
  -------- -------- ------- -------


  The first non blank line that follows '|.t| determines the width
and alignment of the columns.

  The '|*| character sets the type of alignment, default is centered,
if '|*| is at the left edge of the column the column will be left aligned.

  If a line starts with '|-| or '|=| then it sets the end of row.
  
  Row 0 and column 0 are used as headers. 

  Cells may contain formatting tags ('|`'| ones) but not other structures.

  
.%% Figures
 
  Figures can be specified using the following syntax:
  
.v
  .figure sourcefile.ext 'mark>
    ASCII representation of the figure
  ..
..

  If the formatter is not able to handle a figure in the format specified
by '|.ext| it will use the ASCII rapresentation which is treated as it was
verbatim text.

For example, if you are  generating a html  document, the first figure will be
sustituted by the external file '|myfig.gif| '(no check is done on its existence!):

.v
  .fig myfig.gif '<afig> "Step example"
         +------+
     X ->|  Y   | -> Z
         +------+
  ..
..

.fig myfig.gif '<afig>
       +------+
   X ->|  Y   | -> Z
       +------+
..

while the '|pct| format won't be handled.

.v
  .fig myfig.pct '<afig>
         +------+
     X ->|  Y   | -> Z
         +------+
  ..
..


.fig myfig.pct '<afig>
       +------+
   X ->|  Y   | -> Z
       +------+
..

  A figure can be specified as a dot diagram:
  
.v
  .fig dot '<afig>
    digraph graphname
    {
        a -> b -> c;
        b -> d;
    }
  ..
..


.fig dot '<afig>
    digraph graphname
    {
        a -> b -> c;
        b -> d;
    }
..
  


.%% Footnotes
-------------

  The footnotes are useful to insert an annotation that should not be
read togheter with the rest of the text. To insert a footnote simply
enclose its text between '|'`(| and '|)| as you can see in the following
example:

.verb
 ... preceding text '(this is a footnote) following text ...
..

  Footnotes are equivalent to a space character. '(Do not trust to this
sentence!)

.%% Cross reference
-------------------

 The phrases "'/see also .../" or "'/the section ... describes/" occur over
and over in a document, we need to express such references in a symbolic way
to avoid the needing of printing the document, check the correctness of
cross references and modify it if needed. 


.%%% Setting up a mark
''''''''''''''''''''''
  To set a '/target point/ for a reference the tag to use is: '|'`<|
followed by a label and closed by '|>|. 

  A label can be any sequence of lowercase or upper case alfanumeric
characters. ('|[0-9A-Za-z]|)

  Here is an example:
.v
  ... We are talking about marks '<mrk> here ...
..
  
that defines the '|mrk| mark.

The '|`'| is not needed in a '|.| tag:

.verb
  Euler's formula:

  .$ <euler> 
      e ^(i*pi) + 1 = 0
  ..
..

              
.%%% Referring to marks
'''''''''''''''''''''''
  Summarizing, you can mark a section, an equation, a verbatim block,
a figure, a table, or a generic point in the text.

  Once a mark has been set, you can refer to it with the following syntax:

.v
  ... and will later refer to '<them=mrk> ...
..

  The string "'|them|" will appear in the text toghether with a visible
rappresentation of the markup.

  For example, in HTML it will rendered as:
  
.v 
  ... and will later refer to <a href="#mrk">them</a> ...
..

  When a mark is defined, the following attributes are available for later
reference:
  
 .[mrk:page]  the page where it will appear. This is supposed to be a an
              empty string if the notion of page has no sense (as for HTML).
              It will include the string "'|page|". 
  
  [mrk:title] the title (for sections) or caption (for tables, figure and
              equations) where it is defined
              
  [mrk:num]   the number of the section, table, figure or equation where it
              is defined.

  [mrk:type]  the type ("section", "table", "figure" or "equation") of place
              where it is defined.

  [mrk:name]  the label itself

  [mrk:file]  the full filename where it is defined
 
  [mrk:line]  the source line where it is defined.
 ..

  For example as in:
  
.verb
   ... the '<euler:type> '<euler:num> on page '<euler:page> includes 
..


  Marks can be referred across files using the following syntax:

.v 
  ... '{day} is defined in the file '<defs.h=defs.h#types:page> ...
..
  
  Note that it is similar to HTML ('|<a href="defs.h#types">|)

  To summarize, the general form for reference is:

.v  
    '<text=file#mark:attr>
..

  There may be spaces around '|=|, '|#| and '|:| and they will be ignored.

  
.%%% Counters
'''''''''''''
.>
     '*Not implemented*
..

   Counters may be useful to track a set of element one would need to refer
to.

  .['`#counter]    print the counter and increment it by one
   ['`#counter=3]  set counter value to 3 with
   ['`#counter+]   increment counter without diplaying it 
   ['`#counter?]   display counter without incrementing it 
  ..
  
.%%%% Predefined counters
      '''''''''''''''''''
 
  There are 8 predefined counters that can only be read:
  
  .[fn] last footnote number. Is incremented each time '|'`(| is used;
   [pg] current page;
   [dt] current date and time;
   [eq] last equation number. Is incremented each time '|.$| or '|'`$|
        is used;
   [fg] last figure number.  Is incremented each time '|.fig| is used;
   [tb] last table number. Is incremented each time '|.table| is used;
   [sc] current section number.  Is incremented each time '|%| is used;
   [ln] corresponding line number in the source document;
  ..
  
.%% Indexes
'''''''''''
.>
 '*Not implemented*
..

  You can build a sorted index in the following way:

.verb
  text text '[sorted index entry] text text
..

  The example above will produce three entries in the index: "'/sorted
index entry/", "'/index entry, sorted/" and "'/entry, sorted index/".
 Rotation is done at every blank, to avoid rotation you can use "'|~|"
instead of a blank. For example:

.verb
  text text '[sorted index~entry] text text
..

will produce two entries: "'/sorted index entry/" and "'/index entry, 
sorted/". '(The idea was borrowed by an example in the AWK manual.)

  See also the section '<cndx:num> for identifiers index.



.% Talking about the code 
=========================

  The main purpose of '/fmt/ is to talk about code.


.%% <cndx> Identifier indexes 
------------------------------
  A sorted index of identifier can be generated for each file.

  Every time you want to refer to an identifier in your source code, you can
enclose it between ''|'`{|'' and ''|}|'.  Adding ''|=|' at the beginning (i.e
using ''|{=|') means that it's a reference to the definition of that identifier.

 You can insert a '/tag/ after the variable name, separated by
a colon ''|:|', that specifies in which index the identifier should be inserted.
Multiple indexes can be specified separating them with a comma ''|,|'.

  For example, in the following code:

.verbatim
  /* Each '{day:vars,} has a value of type '{days:types=} */
  typedef days = enum {Sun,Mon,Tue,Wed,Thu,Fri,Sat};
..

  We are talking about the '|day| identifier which usage will be reported in 
the main, unnamed, index and in the '|vars| index, and are defining the '|days|
identifier that will be inserted in the '/types/ index.

  If an index does not exist, it will be created usign tha tag ('/var/ or 
'/types/ in this case) as title. To define an index title, you can use the
following syntax:
 
.verbatim
   '{:ndxtag=Index title}
..

  Where '|ndxtag| is the tag (a string of lowercase alphabetic characters) and
'|Index Title| is the title of the index in the document.

  The idiom
.verbatim
   '{:=Index title}
..
  defines the title of the main index.

  If the '|autoxref| is turned on, a global index will be produced that will
contain all the identifiers along with a reference to the lines where
they appear.

  If  '|autoxref|  is off, an  index  will  be  generated  only if  explicitly
defined.
 

.v
    {=varname:type=index}
..

.%% Code blocks

  You can outline the code using '|.{{| and '|.}}| tags

.verb
  .{{ create the flag environment
    .... 
  .}} 
..

  You can specify what language the code block is in:

.v
  .{{ =C
  
  .}}
..

  You can also specify that a code block should not be formatted or considerd
for cross reference:

.v
   .{{ - Batch source 
  
   .}}
..

 This may be useful for languages that embeds parts of code in other languages
(for example DOS Batch files).



.% Quick reference
==================

Structural tags (end any other structural tags)

.['|.T|]  document title (breaks other .)
 ['|.A|]  document author(s) (breaks other .)
 ['|.D|]  document date (breaks other .)
 ['|.:|]  section with a given style (breaks other .)
 ['|.%|]  Section (number of '|%| matters!) (breaks other .)
..

Block tags

.['|.{{|] code outline
 ['|.f|]  figure
 ['|.t|]  table
 ['|.v|]  verbatim
 ['|.$|]  equation
 ['|.[|]  List
 ['|.#|]  List
 ['|.*|]  List
 ['|.o|]  List
 ['|.-|]  List
 ['|.>|]  indented text (number of '|>| matters)
 ['|..|]  end of text block
..

Inline tags

.['|`'/|] italic
 ['|`'*|] bold
 ['|`'||] teletype
 ['|`'_|] underline
 ['|`'(|] footnote
 ['|`'<|] mark & reference
 ['|`'#|] a counter
 ['|`'$|] math mode
 ['|`'{|] An identifier to be included in indexes and cross references
..

.% BNF
======

.v

  doc = header? section*
   
  section = sectitle paragraphs*
  
  paragraph

..

.% License
==========

.v
 (C) by Remo Dentato (rdentato@gmail.com)

 Permission to use, copy, modify and distribute this code and
 its documentation for any purpose is hereby granted without
 fee, provided that the above copyright notice, or equivalent
 attribution acknowledgement, appears in all copies and
 supporting documentation.
 
 Copyright holder makes no representations about the suitability
 of this software for any purpose. It is provided "as is" without
 express or implied warranty.
..
 